diff --git a/kitty.spec b/kitty.spec
index 308733f..53e3574 100644
--- a/kitty.spec
+++ b/kitty.spec
@@ -8,6 +8,7 @@
 %endif
 
 %global goipath kitty
+%global _default_patch_fuzz 2
 
 Name:           kitty
 Version:        0.34.1
@@ -62,6 +63,11 @@ Source5:        https://calibre-ebook.com/signatures/kovid.gpg
 # * https://github.com/kovidgoyal/kitty/pull/2088
 Source1:        https://raw.githubusercontent.com/kovidgoyal/kitty/46c0951751444e4f4994008f0d2dcb41e49389f4/kitty/data/%{name}.appdata.xml
 
+Patch: parse-base10-rgb.diff
+Patch: remove-resize-text.diff
+Patch: remove-initial-color.diff
+Patch: thicker-braille-dots.diff
+
 # https://fedoraproject.org/wiki/Changes/EncourageI686LeafRemoval
 ExcludeArch:    %{ix86}
 
diff --git a/parse-base10-rgb.diff b/parse-base10-rgb.diff
new file mode 100644
index 0000000..ae7eebb
--- /dev/null
+++ b/parse-base10-rgb.diff
@@ -0,0 +1,27 @@
+diff --git a/kitty/rgb.py b/kitty/rgb.py
+index 5526ce563..d4a965063 100644
+--- a/kitty/rgb.py
++++ b/kitty/rgb.py
+@@ -41,6 +41,13 @@ def parse_rgb(spec: str) -> Optional[Color]:
+     return None
+ 
+ 
++def parse_base10_rgb(spec: str) -> Optional[Color]:
++    colors = spec.split(',')
++    if len(colors) == 3:
++        return Color(*map(int, colors))
++    return None
++
++
+ def color_from_int(x: int) -> Color:
+     return Color((x >> 16) & 255, (x >> 8) & 255, x & 255)
+ 
+@@ -69,6 +76,8 @@ def to_color(raw: str, validate: bool = False) -> Optional[Color]:
+             val = parse_sharp(raw[1:])
+         elif raw.startswith('rgb:'):
+             val = parse_rgb(raw[4:])
++        elif raw.startswith('base10_rgb:'):
++            val = parse_base10_rgb(raw[11:])
+     if val is None and validate:
+         raise ValueError(f'Invalid color name: {raw}')
+     return val
diff --git a/remove-initial-color.diff b/remove-initial-color.diff
new file mode 100644
index 0000000..cc8e61a
--- /dev/null
+++ b/remove-initial-color.diff
@@ -0,0 +1,167 @@
+diff --git a/glfw/glfw3.h b/glfw/glfw3.h
+index c12979a6c..cc73c2c37 100644
+--- a/glfw/glfw3.h
++++ b/glfw/glfw3.h
+@@ -1055,7 +1055,6 @@ typedef enum {
+ #define GLFW_X11_INSTANCE_NAME      0x00024002
+ 
+ #define GLFW_WAYLAND_APP_ID         0x00025001
+-#define GLFW_WAYLAND_BGCOLOR        0x00025002
+ /*! @} */
+ 
+ #define GLFW_NO_API                          0
+diff --git a/glfw/internal.h b/glfw/internal.h
+index f3d10357a..149dd2a2c 100644
+--- a/glfw/internal.h
++++ b/glfw/internal.h
+@@ -332,7 +332,6 @@ struct _GLFWwndconfig
+     } x11;
+     struct {
+         char      appId[256];
+-        uint32_t  bgcolor;
+     } wl;
+ };
+ 
+diff --git a/glfw/window.c b/glfw/window.c
+index 4c2314a24..c9870ac33 100644
+--- a/glfw/window.c
++++ b/glfw/window.c
+@@ -468,9 +468,6 @@ GLFWAPI void glfwWindowHint(int hint, int value)
+         case GLFW_REFRESH_RATE:
+             _glfw.hints.refreshRate = value;
+             return;
+-        case GLFW_WAYLAND_BGCOLOR:
+-            _glfw.hints.window.wl.bgcolor = value;
+-            return;
+     }
+     _glfwInputError(GLFW_INVALID_ENUM, "Invalid window hint 0x%08X", hint);
+ }
+diff --git a/glfw/wl_window.c b/glfw/wl_window.c
+index 35fabd611..2a06db997 100644
+--- a/glfw/wl_window.c
++++ b/glfw/wl_window.c
+@@ -789,78 +789,6 @@ typedef union pixel {
+     uint32_t value;
+ } pixel;
+ 
+-static struct wl_buffer*
+-create_single_color_buffer(int width, int height, pixel color) {
+-    // convert to pre-multiplied alpha as that's what wayland wants
+-    if (width == 1 && height == 1 && _glfw.wl.wp_single_pixel_buffer_manager_v1) {
+-#define C(x) (uint32_t)(((double)((uint64_t)color.alpha * color.x * UINT32_MAX)) / (255 * 255))
+-        struct wl_buffer *ans = wp_single_pixel_buffer_manager_v1_create_u32_rgba_buffer(
+-            _glfw.wl.wp_single_pixel_buffer_manager_v1, C(red), C(green), C(blue), color.alpha * UINT32_MAX);
+-#undef C
+-        if (!ans) _glfwInputError(GLFW_PLATFORM_ERROR, "Wayland: failed to create single pixel buffer");
+-        return ans;
+-    }
+-    float alpha = color.alpha / 255.f;
+-    color.red = (uint8_t)(alpha * color.red); color.green = (uint8_t)(alpha * color.green); color.blue = (uint8_t)(alpha * color.blue);
+-    int shm_format = color.alpha == 0xff ? WL_SHM_FORMAT_XRGB8888 : WL_SHM_FORMAT_ARGB8888;
+-    const size_t size = 4 * width * height;
+-    int fd = createAnonymousFile(size);
+-    if (fd < 0) {
+-        _glfwInputError(GLFW_PLATFORM_ERROR, "Wayland: failed to create anonymous file");
+-        return NULL;
+-    }
+-    uint32_t *shm_data = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+-    if (color.value) for (size_t i = 0; i < size/4; i++) shm_data[i] = color.value;
+-    else memset(shm_data, 0, size);
+-    if (!shm_data) {
+-        close(fd);
+-        _glfwInputError(GLFW_PLATFORM_ERROR, "Wayland: failed to mmap anonymous file");
+-        return NULL;
+-    }
+-    struct wl_shm_pool *pool = wl_shm_create_pool(_glfw.wl.shm, fd, size);
+-    if (!pool) {
+-        close(fd); munmap(shm_data, size);
+-        _glfwInputError(GLFW_PLATFORM_ERROR, "Wayland: failed to create wl_shm_pool of size: %zu", size);
+-        return NULL;
+-    }
+-    struct wl_buffer *buffer = wl_shm_pool_create_buffer(pool, 0, width, height, width * 4, shm_format);
+-    wl_shm_pool_destroy(pool); munmap(shm_data, size); close(fd);
+-    if (!buffer) {
+-        _glfwInputError(GLFW_PLATFORM_ERROR, "Wayland: failed to create wl_buffer of size: %zu", size);
+-        return NULL;
+-    }
+-    return buffer;
+-}
+-
+-static bool
+-attach_temp_buffer_during_window_creation(_GLFWwindow *window) {
+-    pixel color;
+-    color.value = _glfw.hints.window.wl.bgcolor;
+-    if (!window->wl.transparent) color.alpha = 0xff;
+-    else if (color.alpha == 0) color.value = 0;  // fully transparent blends best with black and we can use memset
+-
+-    if (window->wl.temp_buffer_used_during_window_creation) {
+-        wl_buffer_destroy(window->wl.temp_buffer_used_during_window_creation);
+-        window->wl.temp_buffer_used_during_window_creation = NULL;
+-    }
+-    int width, height;
+-    _glfwPlatformGetFramebufferSize(window, &width, &height);
+-
+-    if (window->wl.wp_viewport) {
+-        window->wl.temp_buffer_used_during_window_creation = create_single_color_buffer(1, 1, color);
+-        wl_surface_set_buffer_scale(window->wl.surface, 1);
+-        wp_viewport_set_destination(window->wl.wp_viewport, window->wl.width, window->wl.height);
+-    } else {
+-        window->wl.temp_buffer_used_during_window_creation = create_single_color_buffer(width, height, color);
+-        wl_surface_set_buffer_scale(window->wl.surface, window->wl.fractional_scale ? 1: _glfwWaylandIntegerWindowScale(window));
+-    }
+-    if (!window->wl.temp_buffer_used_during_window_creation) return false;
+-    wl_surface_attach(window->wl.surface, window->wl.temp_buffer_used_during_window_creation, 0, 0);
+-    wl_surface_commit(window->wl.surface);
+-    debug("Attached temp buffer during window creation of size: %dx%d and rgba(%u, %u, %u, %u)\n", width, height, color.red, color.green, color.blue, color.alpha);
+-    return true;
+-}
+-
+ static void
+ loop_till_window_fully_created(_GLFWwindow *window) {
+     if (!window->wl.window_fully_created) {
+@@ -890,9 +818,6 @@ xdgSurfaceHandleConfigure(void* data, struct xdg_surface* surface, uint32_t seri
+     xdg_surface_ack_configure(surface, serial);
+     debug("XDG surface configure event received and acknowledged\n");
+     apply_xdg_configure_changes(window);
+-    if (!window->wl.window_fully_created) {
+-        if (!attach_temp_buffer_during_window_creation(window)) window->wl.window_fully_created = true;
+-    }
+ }
+ 
+ static const struct xdg_surface_listener xdgSurfaceListener = {
+@@ -1003,9 +928,6 @@ layer_surface_handle_configure(void* data, struct zwlr_layer_surface_v1* surface
+         layer_set_properties(window);
+     }
+     commit_window_surface_if_safe(window);
+-    if (!window->wl.window_fully_created) {
+-        if (!attach_temp_buffer_during_window_creation(window)) window->wl.window_fully_created = true;
+-    }
+ }
+ 
+ static void
+diff --git a/kitty/glfw-wrapper.h b/kitty/glfw-wrapper.h
+index 62b3f7bf5..10f3577c9 100644
+--- a/kitty/glfw-wrapper.h
++++ b/kitty/glfw-wrapper.h
+@@ -793,7 +793,6 @@ typedef enum {
+ #define GLFW_X11_INSTANCE_NAME      0x00024002
+ 
+ #define GLFW_WAYLAND_APP_ID         0x00025001
+-#define GLFW_WAYLAND_BGCOLOR        0x00025002
+ /*! @} */
+ 
+ #define GLFW_NO_API                          0
+diff --git a/kitty/glfw.c b/kitty/glfw.c
+index c9550833b..7980528b4 100644
+--- a/kitty/glfw.c
++++ b/kitty/glfw.c
+@@ -1149,9 +1149,6 @@ create_os_window(PyObject UNUSED *self, PyObject *args, PyObject *kw) {
+     }
+     bool want_semi_transparent = (1.0 - OPT(background_opacity) >= 0.01) || OPT(dynamic_background_opacity);
+     glfwWindowHint(GLFW_TRANSPARENT_FRAMEBUFFER, want_semi_transparent);
+-    uint32_t bgcolor = OPT(background);
+-    uint32_t bgalpha = (uint32_t)((MAX(0.f, MIN((OPT(background_opacity) * 255), 255.f))));
+-    glfwWindowHint(GLFW_WAYLAND_BGCOLOR, ((bgalpha & 0xff) << 24) | bgcolor);
+     // We use a temp window to avoid the need to set the window size after
+     // creation, which causes a resize event and all the associated processing.
+     // The temp window is used to get the DPI.
diff --git a/remove-resize-text.diff b/remove-resize-text.diff
new file mode 100644
index 0000000..ce69083
--- /dev/null
+++ b/remove-resize-text.diff
@@ -0,0 +1,29 @@
+diff --git a/kitty/child-monitor.c b/kitty/child-monitor.c
+index 49d95ad2c..683a27567 100644
+--- a/kitty/child-monitor.c
++++ b/kitty/child-monitor.c
+@@ -777,6 +777,7 @@ prepare_to_render_os_window(OSWindow *os_window, monotonic_t now, unsigned int *
+     return needs_render;
+ }
+ 
++/*
+ static void
+ draw_resizing_text(OSWindow *w) {
+     if (monotonic() - w->created_at > ms_to_monotonic_t(1000) && w->live_resize.num_of_resize_events > 1) {
+@@ -790,6 +791,7 @@ draw_resizing_text(OSWindow *w) {
+         }
+     }
+ }
++*/
+ 
+ static void
+ render_prepared_os_window(OSWindow *os_window, unsigned int active_window_id, color_type active_window_bg, unsigned int num_visible_windows, bool all_windows_have_same_bg) {
+@@ -811,7 +813,7 @@ render_prepared_os_window(OSWindow *os_window, unsigned int active_window_id, co
+             w->cursor_visible_at_last_render = WD.screen->cursor_render_info.is_visible; w->last_cursor_x = WD.screen->cursor_render_info.x; w->last_cursor_y = WD.screen->cursor_render_info.y; w->last_cursor_shape = WD.screen->cursor_render_info.shape;
+         }
+     }
+-    if (os_window->live_resize.in_progress) draw_resizing_text(os_window);
++    // if (os_window->live_resize.in_progress) draw_resizing_text(os_window);
+     swap_window_buffers(os_window);
+     os_window->last_active_tab = os_window->active_tab; os_window->last_num_tabs = os_window->num_tabs; os_window->last_active_window_id = active_window_id;
+     os_window->focused_at_last_render = os_window->is_focused;
diff --git a/thicker-braille-dots.diff b/thicker-braille-dots.diff
new file mode 100644
index 0000000..2fc9591
--- /dev/null
+++ b/thicker-braille-dots.diff
@@ -0,0 +1,13 @@
+diff --git a/kitty/fonts/box_drawing.py b/kitty/fonts/box_drawing.py
+index 284b6642a..848c28cef 100644
+--- a/kitty/fonts/box_drawing.py
++++ b/kitty/fonts/box_drawing.py
+@@ -813,6 +813,8 @@ def braille_dot(buf: BufType, width: int, height: int, col: int, row: int) -> No
+             offset = y * width
+             for x in range(x_start, min(width, x_start + dot_width)):
+                 buf[offset + x] = 255
++                if (width, height) == (7, 16):
++                    buf[offset + x + 1] = 255
+ 
+ 
+ def braille(buf: BufType, width: int, height: int, which: int = 0) -> None:
